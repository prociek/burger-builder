{"version":3,"sources":["components/IU/Input/Input.js","components/IU/Input/Input.module.css","shared/utility.js","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","attachedClasses","classes","isValid","touched","push","Invalid","elementType","className","join","elementConfig","name","value","onChange","changed","options","map","opt","display","InputElement","Label","htmlFor","module","exports","checkValidation","rules","required","trim","minLength","length","maxLength","isEmail","RegExp","test","connect","state","loading","user","error","isAuth","token","building","burger","redirectPath","dispatch","onAuthenicate","email","password","isSignUp","authenticate","onSetAuthRedirectPath","path","setAuthRedirectPath","useState","type","placeholder","validation","controls","setControls","setIsSignUp","useEffect","onChangeHandler","e","newInput","target","newControls","inputs","key","Auth","Fragment","to","onSubmit","preventDefault","style","textAlign","color","message","toLowerCase","split","btnType","clicked","prevState"],"mappings":"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","file":"static/js/4.082b848c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport classes from \"./Input.module.css\";\n\nconst Input = (props) => {\n  let inputElement = null;\n  let attachedClasses = [classes.Input];\n  if (props.isValid && props.touched) {\n    attachedClasses.push(classes.Invalid);\n  }\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={attachedClasses.join(\" \")}\n          {...props.elementConfig}\n          name={props.name}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          name={props.name}\n          className={attachedClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          name={props.name}\n          className={attachedClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((opt) => (\n            <option key={opt.value} value={opt.value}>\n              {opt.display}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input {...props} />;\n  }\n  return (\n    <div className={classes.InputElement}>\n      <label className={classes.Label} htmlFor={props.name}>\n        {props.name}\n      </label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputElement\":\"Input_InputElement__1plo6\",\"Label\":\"Input_Label__1BhVk\",\"Input\":\"Input_Input__2iGzR\",\"Invalid\":\"Input_Invalid__2Zq_q\"};","export const checkValidation = (value, rules) => {\n  let isValid = true;\n\n  if (rules.required) {\n    isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.trim().length >= rules.minLength && isValid;\n  }\n\n  if (rules.maxLength) {\n    isValid = value.trim().length <= rules.maxLength && isValid;\n  }\n\n  if (rules.isEmail) {\n    const re = new RegExp(\n      /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\n    );\n    isValid = re.test(value) && isValid;\n  }\n\n  return isValid;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__ON493\"};","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport Input from \"../../components/IU/Input/Input\";\nimport Button from \"../../components/IU/Button/Button\";\nimport Spinner from \"../../components/IU/Spinner/Spinner\";\nimport classes from \"./Auth.module.css\";\nimport { authenticate, setAuthRedirectPath } from \"../../store/actions\";\nimport { checkValidation } from \"../../shared/utility\";\n\nconst Auth = props => {\n  const [controls, setControls] = useState({\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Your e-mail\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      isValid: false,\n      touched: false\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      isValid: false,\n      touched: false\n    }\n  });\n  const { building, onSetAuthRedirectPath } = props;\n\n  const [isSignUp, setIsSignUp] = useState(false);\n\n  useEffect(() => {\n    if (!building) {\n      onSetAuthRedirectPath(\"/\");\n    } else {\n      onSetAuthRedirectPath(\"/checkout\");\n    }\n  }, [building, onSetAuthRedirectPath]);\n\n  const switchModeHandler = () => {\n    setIsSignUp(prevState => {\n      return !prevState;\n    });\n  };\n\n  const onChangeHandler = e => {\n    const newInput = {\n      ...controls[e.target.name],\n      value: e.target.value,\n      isValid: checkValidation(\n        e.target.value,\n        controls[e.target.name].validation\n      ),\n      touched: true\n    };\n    const newControls = { ...controls, [e.target.name]: newInput };\n    setControls(newControls);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onAuthenicate(\n      controls.email.value,\n      controls.password.value,\n      isSignUp\n    );\n  };\n\n  let inputs = [];\n  for (let key in controls) {\n    inputs.push(\n      <Input\n        key={key}\n        name={key}\n        elementType={controls[key].elementType}\n        elementConfig={controls[key].elementConfig}\n        value={controls[key].value}\n        isValid={!controls[key].isValid}\n        touched={controls[key].touched}\n        changed={onChangeHandler}\n      />\n    );\n  }\n  return (\n    <section className={classes.Auth}>\n      {props.loading ? (\n        <Spinner />\n      ) : (\n        <React.Fragment>\n          {props.isAuth && <Redirect to={props.redirectPath} />}\n          <form onSubmit={handleSubmit}>\n            <h4>Welcome!</h4>\n            {inputs}\n            {props.error && (\n              <p style={{ textAlign: \"center\", color: \"red\" }}>\n                {props.error.message.toLowerCase().split(\"_\").join(\" \")}\n              </p>\n            )}\n            <Button type=\"submit\" btnType=\"Success\">\n              {isSignUp ? \"Sign Up\" : \"Log in\"}\n            </Button>\n          </form>\n          <small>\n            {isSignUp ? \"Have alredy account\" : \"Don't have a account?\"}\n          </small>\n          <Button type=\"button\" clicked={switchModeHandler} btnType=\"Primary\">\n            {isSignUp ? \"log in\" : \"sign up\"}\n          </Button>\n        </React.Fragment>\n      )}\n    </section>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.user.loading,\n    error: state.user.error,\n    isAuth: state.user.token != null,\n    building: state.burger.building,\n    redirectPath: state.user.redirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuthenicate: (email, password, isSignUp) =>\n      dispatch(authenticate(email, password, isSignUp)),\n    onSetAuthRedirectPath: path => dispatch(setAuthRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}